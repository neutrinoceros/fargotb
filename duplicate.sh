#!/bin/bash

# --------------------------
# Author : ClÃ©ment Robert
# written october 2016
# --------------------------
# This program copies a base simulation with all its file-tree 
# except the output files
#
# Arguments 
#    0) $base   : simulation to be copied
#    1) $target : path for the copy
#
# Options
#    r|R) restart mode, preserves the files requiered for a restart.
#    m|M) move (mv) mode : base is moved to target while auto-refering
#                          files are still being updated

# DEFINITIONS
#----------------------------------------------------------------------

restartfrom=0
MVMODE=false
USAGE="echo -e 'usage\n-----\n\t\$0:base\n \t\$1:target'"


# CHECK ARGUMENTS CONSISTENCY
#----------------------------------------------------------------------

if (( $# != 2 ))
then
    echo
    if (( $# > 0 )); then
        case $1 in
            "-h"|"--help" ) eval $USAGE; exit
                ;;
            * )
                ;;
        esac
    fi
    echo "error : invalid number of argments"; eval $USAGE
    echo
    exit
fi

# PARSING
#----------------------------------------------------------------------

while getopts r:R:mM option
do
    case $option in
        r|R ) restartfrom=$2 ;
            shift $((OPTIND-1))
            ;;
        m|M ) MVMODE=true
            shift $((OPTIND-1))
            ;;
        *) exit 1;;
    esac
done
        

# gets the absolute path even from relative input
roots=$(readlink -e $1 | cut -d '/' -f 2)
if [[ $roots == "gpfs" ]]
then
    base=/$(readlink -e $1 | cut --complement -d '/' -f 1,2)
else
    base=$(readlink -e $1)
fi

# removes a "/" ending char if provided
roots=$(readlink -e $(dirname $2) | cut -d '/' -f 2)
if [[ $roots == "gpfs" ]]
then
    tardir=/$(readlink -e $(dirname $2) | cut --complement -d '/' -f 1,2)
else
    tardir=$(readlink -e $(dirname $2))
fi

target=$tardir/$(basename $2)


# SYNCHRONIZATION
#----------------------------------------------------------------------

FLAGS=(
    --exclude="*output/*"  # output files
    --exclude="*.dat"      # data files
    --exclude="*.std*"     # .stdout and .stderr generated by mpi
    --exclude="*~"         # temp files
    --exclude="\#*\#"      # emacs autosave files
     )

if [[ $MVMODE == true ]]
then
    echo "THIS IS MVMODE"
    read -p "proceed (y/[n])?    " choice

case "$choice" in
    y|Y|yes|YES ) mv $base $target
        ;;
    *) echo "I'm sorry Dave. I'm afraid I can't do that"
        ;;
esac

else
# main synchronisation
    rsync -av "${FLAGS[@]}" $base/ $target 

# optional, addtional synchro including specified restart files
    optf="find $base/output  | egrep '[^0-9]$restartfrom.dat'"
    autf="find $base/output/ | egrep '/((planet|orbit)[0-9]*|used_rad).dat'"

    if [[ $restartfrom > 0 ]]
    then
        AUTOINCLUDE=$(eval $autf)
        RESTARTFILES=$(eval $optf)
        rsync -av --include=$RESTARTFILES \
            --include=$AUTOINCLUDE \
            $base/output/*$restartfrom.dat $target/output/
    fi
fi


if [[ $? == 0 ]]
then 

# AUTO-EDITION of files mentioning their own location
#----------------------------------------------------------------------
# /!\ This part may still be subject to bug corrections

    sed -i "s!$base!$target!g" $target/jobs/*oar
    sed -i "s!$base!$target!g" $target/input*/*par


# SECURITY
#----------------------------------------------------------------------
# we force the user to change persmissions before they can 
# run the simulation in case there is still something wrong

    chmod -x $target/*exe 

fi